on:
  push:
    branches:
      - master
    # Sequence of patterns matched against refs/tags
    paths:
      - 'VERSION' # Push events when the VERSION file changes

name: Prepare a new release and add release assets

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}

jobs:
  release:
    name: Prepare a new release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo "::debug::Get the current version number"
          VER=$(cat VERSION)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Restore or Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          # if requirements.txt hasn't changed, then it will be a "cache hit" and pip will be restored
          # if requirements.txt HAS changed, it will be a "cache miss" and a new cache of pip will be created if the job completes successfully
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v2

      # This should be pulled from cache, if there's not a new version
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      # Install *all* the libraries!
      - name: Install the libraries
        run: |
          echo "::debug::Installing envirodiy/EnviroDIY_DS3231"
          pio lib -g install envirodiy/EnviroDIY_DS3231
          echo "::debug::Installing arduino-libraries/RTCZero"
          pio lib -g install arduino-libraries/RTCZero
          echo "::debug::Installing greygnome/EnableInterrupt"
          pio lib -g install greygnome/EnableInterrupt
          echo "::debug::Installing greiman/SdFat"
          pio lib -g install greiman/SdFat
          echo "::debug::Installing vshymanskyy/TinyGSM"
          pio lib -g install vshymanskyy/TinyGSM
          echo "::debug::Installing knolleary/PubSubClient"
          pio lib -g install knolleary/PubSubClient
          echo "::debug::Installing adafruit/'Adafruit BusIO'"
          pio lib -g install adafruit/'Adafruit BusIO'
          echo "::debug::Installing adafruit/'Adafruit Unified Sensor'"
          pio lib -g install adafruit/'Adafruit Unified Sensor'
          echo "::debug::Installing https://github.com/soligen2010/Adafruit_ADS1X15.git"
          pio lib -g install https://github.com/soligen2010/Adafruit_ADS1X15.git
          echo "::debug::Installing adafruit/'Adafruit AM2315'"
          pio lib -g install adafruit/'Adafruit AM2315'
          echo "::debug::Installing adafruit/'Adafruit BME280 Library'"
          pio lib -g install adafruit/'Adafruit BME280 Library'
          echo "::debug::Installing adafruit/'DHT sensor library'"
          pio lib -g install adafruit/'DHT sensor library'
          echo "::debug::Installing adafruit/'Adafruit INA219'"
          pio lib -g install adafruit/'Adafruit INA219'
          echo "::debug::Installing adafruit/'Adafruit MPL115A2'"
          pio lib -g install adafruit/'Adafruit MPL115A2'
          echo "::debug::Installing paulstoffregen/OneWire"
          pio lib -g install paulstoffregen/OneWire
          echo "::debug::Installing milesburton/DallasTemperature"
          pio lib -g install milesburton/DallasTemperature
          echo "::debug::Installing envirodiy/SDI-12"
          pio lib -g install envirodiy/SDI-12
          echo "::debug::Installing northernwidget/MS5803"
          pio lib -g install northernwidget/MS5803
          echo "::debug::Installing https://github.com/NorthernWidget-Skunkworks/Tally_Library.git#Dev_I2C"
          pio lib -g install https://github.com/NorthernWidget-Skunkworks/Tally_Library.git#Dev_I2C
          echo "::debug::Installing envirodiy/SensorModbusMaster"
          pio lib -g install envirodiy/SensorModbusMaster
          echo "::debug::Installing envirodiy/KellerModbus"
          pio lib -g install envirodiy/KellerModbus
          echo "::debug::Installing envirodiy/YosemitechModbus"
          pio lib -g install envirodiy/YosemitechModbus
          echo "::debug::Installing vshymanskyy/StreamDebugger"
          pio lib -g install vshymanskyy/StreamDebugger
          echo "::debug::Installing https://github.com/${{ github.repository }}.git#${{ github.sha }}"
          pio lib -g install https://github.com/${{ github.repository }}.git#${{ github.sha }}
          echo "::debug::Installing https://github.com/EnviroDIY/SoftwareSerial_ExternalInts.git"
          pio lib -g install https://github.com/EnviroDIY/SoftwareSerial_ExternalInts.git
          echo "::debug::Installing https://github.com/PaulStoffregen/AltSoftSerial.git"
          pio lib -g install https://github.com/PaulStoffregen/AltSoftSerial.git
          echo "::debug::Installing https://github.com/SRGDamia1/NeoSWSerial.git"
          pio lib -g install https://github.com/SRGDamia1/NeoSWSerial.git
          echo "::debug::Installing https://github.com/Testato/SoftwareWire.git"
          pio lib -g install https://github.com/Testato/SoftwareWire.git

      # Uninstall graphics libraries from Adafruit
      - name: Uninstall graphics the libraries
        run: |
          echo "::debug::Removing Adafruit GFX Library"
          pio lib -g uninstall adafruit/Adafruit GFX Library
          echo "::debug::Removing Adafruit NeoPixel"
          pio lib -g uninstall adafruit/Adafruit NeoPixel
          echo "::debug::Removing Adafruit SSD1306"
          pio lib -g uninstall adafruit/Adafruit SSD1306
          echo "::debug::Removing Adafruit ADXL343"
          pio lib -g uninstall adafruit/Adafruit ADXL343
          echo "::debug::Removing Adafruit STMPE610"
          pio lib -g uninstall adafruit/Adafruit STMPE610
          echo "::debug::Removing Adafruit TouchScreen"
          pio lib -g uninstall adafruit/Adafruit TouchScreen
          echo "::debug::Removing Adafruit ILI9341"
          pio lib -g uninstall adafruit/Adafruit ILI9341

      # zip up all the installed libraries
      - name: Zip libraries
        run: |
          zip ModularSensors_Dependencies.zip -r ~/.platformio/lib

      # Remove some extras from the zip
      - name: Remove some extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Deleting extra files to decrease size of zip"
          echo "::debug::Removing Git folders"
          zip -d -q ModularSensors_Dependencies "*/.gitattributes" "*/.gitignore" "*/.gitmodules" "*/.github/*" "*.sh"  "*/Doxyfile" "*/.travis.yml"
          echo "::debug::Removing other pdfs"
          zip -d -q libraries "*/doc/*.pdf"
          echo "::debug::Removing TinyGSM extras"
          zip -d -q libraries "*/TinyGSM/extras/*"
          echo "::debug::Removing YosemitechModbus extras"
          zip -d -q libraries "*/YosemitechModbus/doc/*"
          echo "::debug::Removing SDFat extras"
          zip -d -q libraries "*/SdFat/extras/*"

      # Create a new release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: true
          prerelease: false

      # Upload the zipped dependencies to the release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./ModularSensors_Dependencies.zip
          asset_name: ModularSensors_Dependencies.zip
          asset_content_type: application/zip

      # Publish the new release to the pio package manager
      - name: Publish relesase to PIO
        id: publish-pio
        run: pio package publish
